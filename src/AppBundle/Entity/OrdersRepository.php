<?php

namespace AppBundle\Entity;
use Doctrine\ORM\EntityRepository;

/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends EntityRepository
{
    /** Gets orders for a specific page, keeping in mind limit of orders being displayed
     * @param $products_per_page
     * @param $page_number
     * @return array selected orders
     */
    public function getOpenOrdersForPage($products_per_page, $page_number)
    {
        $query = $this->createQueryBuilder('o')
            ->select('o')
            ->where('o.joiningDeadline > :currentDateTime')
            ->setParameter('currentDateTime', date("Y-m-d H:i:s"))
            ->orderBy('o.eventDate', 'ASC')
            ->getQuery();

        return $query
            ->setFirstResult( ($page_number - 1) * $products_per_page )
            ->setMaxResults( $products_per_page )
            ->getResult();
    }

    /** Gets all users' orders for a specific page, keeping in mind
     * limit of orders being displayed. Returns orders that user created;
     * @param $products_per_page
     * @param $page_number
     * @param $user_id
     * @return array selected orders
     */
    public function getUsersCreatedOrdersForPage($products_per_page, $page_number, $user_id)
    {
        $query = $this->createQueryBuilder('o')
            ->select('o')
            ->where('o.userId = :userId')
            ->andWhere()
            ->setParameters(array(
                    'userId'           => $user_id)
            )
            ->getQuery();

        return $query
            ->setFirstResult( ($page_number - 1) * $products_per_page )
            ->setMaxResults( $products_per_page )
            ->getResult();
    }

    /** Gets all users' orders for a specific page, keeping in mind
     * limit of orders being displayed. Returns orders that user took part in as a guest;
     * @param $products_per_page
     * @param $page_number
     * @param $user_id
     * @return array selected orders
     */
    public function getUsersJoinedOrdersForPage($products_per_page, $page_number, $user_id)
    {
        $query = $this->createQueryBuilder('o')
            ->select('o')
            ->from('AppBundle:UserProduct','up')
            ->from('AppBundle:Product','p')
            ->where('up.userId = :userId')
            ->setParameter(
                'userId', $user_id
            )
            ->andWhere('p.id = up.productId')
            ->andWhere('o.id = p.orderId')
            ->getQuery();

        return $query
            ->setFirstResult( ($page_number - 1) * $products_per_page )
            ->setMaxResults( $products_per_page )
            ->getResult();
    }
}
